{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/2203-JavaScript-primitive-data-types/","result":{"data":{"site":{"siteMetadata":{"title":"Platzi Master"}},"markdownRemark":{"id":"4139418f-ae84-57bf-b837-c27f697e9ba2","excerpt":"Tipos de datos primitivos en JavaScript Seas un desarrollador experimentado o alguien nuevo en JavaScript, conocer los tipos de datos primitivos del lenguaje es‚Ä¶","html":"<h1>Tipos de datos primitivos en JavaScript</h1>\n<p>Seas un desarrollador experimentado o alguien nuevo en JavaScript, conocer los tipos de datos primitivos del lenguaje es una prioridad y en este post vamos a dar un tour por ellos.</p>\n<p>Veremos todos lo tipos y sus partes importantes sin ir muy profundo, si quieres profundizar en ellos puedes ir a los links de <a href=\"#Referencias\">referencia</a> que dejo al final (Yo se que eres de las personas a las que les gusta profundizar).</p>\n<p>Lo primero a tener en mente cuando hablamos de tipos de datos primitivos en JavaScript es que son <strong>inmutables</strong>, esto quiere decir que no hay nada que se pueda hacer para cambiarlos.</p>\n<p><strong>Ahora si vamos a comenzar el tour uno por uno:</strong></p>\n<ul>\n<li><a href=\"#Undefined\">Undefined</a></li>\n<li><a href=\"#Null\">Null</a></li>\n<li><a href=\"#Boolean\">Boolean</a></li>\n<li><a href=\"#String\">String</a></li>\n<li><a href=\"#Symbol\">Symbol</a></li>\n<li><a href=\"#Number\">Number</a></li>\n<li><a href=\"#BigInt\">BigInt</a></li>\n</ul>\n<h2>Undefined</h2>\n<p>Su √∫nico valor es <code class=\"language-text\">undefined</code>, este tipo de dato es encontrado en cualquier variable a la que no se le a asignado un valor.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> heWhoMustNotBeNamed<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>heWhoMustNotBeNamed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">const</span> heWhoMustNotBeNamed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tom Riddle\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>heWhoMustNotBeNamed<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// undefined</span></code></pre></div>\n<h2>Null</h2>\n<p>Su √∫nico valor es <code class=\"language-text\">null</code>. Se usa para valores que intencionalmente sabemos van a faltar.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> roomOfRequirements <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>roomOfRequirements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>Ahora veamos el siguiente c√≥digo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// object</span></code></pre></div>\n<p>Ahora mismo debes estar as√≠: ü§Ø, no te preocupes que este es un error de JavaScript. Recuerda que incluso cuando <code class=\"language-text\">null</code>intenta parecer que es un objeto este no lo es porque es <strong>inmutable</strong>.</p>\n<h2>Boolean</h2>\n<p>El tipo <code class=\"language-text\">bool</code> es una representaci√≥n de alguna identidad l√≥gica ya sea <code class=\"language-text\">true</code>o <code class=\"language-text\">false</code>. Se usan para operaciones l√≥gicas, ¬øTal vez recuerdes las <a href=\"https://www.youtube.com/watch?v=Pfyuv5ZnNNw\">tablas de verdad</a>?</p>\n<p>Veamos su representaci√≥n en c√≥digo de JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// boolean</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// boolean</span>\n\n<span class=\"token keyword\">let</span> isWizard <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isWizard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry ... yer a wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Harry ... yer a wizard</span></code></pre></div>\n<h2>String</h2>\n<p>El tipo de dato string se usa para representar texto y cada elemento (car√°cter) cuenta con un index que comienza en 0.</p>\n<p>Existen diferentes maneras de declarar una <code class=\"language-text\">string</code>.</p>\n<ul>\n<li>‚Äù, single quotes.</li>\n<li>\"\", double quotes.</li>\n<li><code class=\"language-text\"></code>, backticks.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// string</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hogwarts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// string</span>\n\n<span class=\"token keyword\">const</span> siriusAlias <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Padfoot</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>siriusAlias<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>siriusAlias<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"f\"</span></code></pre></div>\n<h2>Symbol</h2>\n<p>Este tipo primitivo es reciente en JavaScript y por lo tanto a√∫n falta mucho por ver del mismo. Piensa en √©l como la propiedad key de un objeto.\nEs importante que recuerdes que este tipo de dato no funciona igual a ning√∫n otro tipo con el mismo nombre de alg√∫n diferente lenguaje.</p>\n<ul>\n<li><strong>Cada s√≠mbolo tiene un valor √∫nico y es inmutable.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> dobbySym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dobby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> dobbySym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dobby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dobbySym <span class=\"token operator\">===</span> dobbySym2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>Aunque el valor es el mismo, JavaScript maneja los s√≠mbolos como valores √∫nicos.</p>\n<h2>Number</h2>\n<p>Cualquier valor num√©rico, usados para c√°lculos matem√°ticos.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token number\">243</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4545</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//number</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.524</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span></code></pre></div>\n<h2>BigInt</h2>\n<p>Este tipo primitivo es reciente en JavaScript al igual que Symbol, sirve para operar grandes valores num√©ricos con precisi√≥n m√°s all√° de los l√≠mites del tipo <code class=\"language-text\">Number</code>.\nPodemos crear un <code class=\"language-text\">BigInt</code>a√±adiendo una n al final del n√∫mero en cuesti√≥n.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> justABigInt <span class=\"token operator\">=</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n\njustABigInt <span class=\"token operator\">+</span> <span class=\"token number\">5n</span> <span class=\"token comment\">// 6n</span></code></pre></div>\n<p>Puedes utilizar los operadores <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">/</code>, <code class=\"language-text\">%</code>y <code class=\"language-text\">*</code>como con el tipo `<code class=\"language-text\"></code>Number<code class=\"language-text\"></code></p>\n<p>Eso es todo por este post, espero te haya ayudado a conocer o recordar los tipos de datos primitivos de JavaScript.</p>\n<p><em>Puedes aportar a este post con la informaci√≥n que quieras sobre el tema.</em></p>\n<p>Puedes contactarme por <a href=\"https://twitter.com/ThAlanDavid1\">Twitter</a> o <a href=\"https://github.com/AlanDavd\">Github</a>, hasta el proximo post.</p>\n<h3>Referencias</h3>\n<ul>\n<li><a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-data-types-and-values\">https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-data-types-and-values</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures</a></li>\n</ul>","frontmatter":{"title":"Tipos de datos primitivos en JavaScript","date":"March 23, 2020","description":"Explicaci√≥n sobre los tipos de datos primitivos que existen en JavaScript.","author":"Alan David","email":"alandavidrl11@gmail.com","platziUser":"ThAlan"}}},"pageContext":{"slug":"/2020/2203-JavaScript-primitive-data-types/","previous":{"fields":{"slug":"/2020/2103-como-colaborar-en-github-parte2/"},"frontmatter":{"title":"C√≥mo colaborar en projectos usando Git y GitHub (parte 2)"}},"next":{"fields":{"slug":"/2020/2303-Habilidades-blandas-que-todo-lider-necesita/"},"frontmatter":{"title":"Habilidades blandas que todo lider necesita"}}}}}